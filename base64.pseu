//Memory-Efficient 4-Register Base64 algorithm by Lucas Lux

#DEFINE LENGTH = ... //string.size();
#DEFINE DATA = ... //*string;
i = 0
rstvar:
x = 0x3F //11111100
temp = 0
buf = 0
memacc = 0 //aka. Accumulator
SP = ... //aka. Stack Pointer

loop:
memacc = i - LENGTH
jz memacc, return

memacc = DATA + i
memacc = *memacc
memacc = memacc & x
memacc = memacc >> temp
memacc = buf | memacc
buf = afterpush
jp push

afterpush:
temp = x
x = ~x
memacc = DATA + i
memacc = *memacc
buf = memacc & x
x = x << temp
buf = buf << temp
temp = x
x = x nand 0x3F
i++

memacc = buf
buf = rstvar
jz x, push

x << temp
jp loop

push:
temp = memacc - 26
jl temp, isupper
temp = temp - 26
jl temp, islower
temp = temp - 10
jl temp, isnum
jz temp, isplus
memacc = '/'
jp endpush
isplus:
memacc = '+'
jp endpush
isnum:
memacc = memacc - 75
islower:
memacc = memacc + 6
isupper:
memacc = memacc + 65
endpush:
*SP = memacc
SP++
jp buf
